// -------------------- IDENTIFICAÇÃO DA PLACA --------------------
#define ARDUINO_ID 1 // Colocar 1 no Uno A, 2 no Uno B
const int SEMAFORO_ID = ARDUINO_ID;

// -------------------- PARÂMETROS DE TEMPO --------------------
const int VERDE_1     = 10;     // Tempo de verde do Semáforo 1 (s)
const int VERDE_2     = 7;      // Tempo de verde do Semáforo 2 (s)
const int AMARELO     = 3000;   // Tempo do amarelo (ms)
const int PED_ESTADA  = 5;      // Tempo de travessia de pedestres (s)

// -------------------- MAPA DE PINOS --------------------
const int VERDE_CARRO    = 2;
const int AMARELO_CARRO  = 3;
const int VERMELHO_CARRO = 4;
const int PED_VERDE      = 5;
const int PED_VERMELHO   = 6;
const int BOTAO_PED      = 7;

// Display 7 segmentos (segmentos A–F nos pinos 8–13)
const int SEG[6] = {8, 9, 10, 11, 12, 13};

// Dígitos de 0 a 9 usando segmentos A–F (sem G), para ânodo comum
const byte DIG[10][6] = {
  {0, 0, 0, 0, 0, 0}, // 0
  {1, 0, 0, 1, 1, 1}, // 1
  {0, 0, 1, 0, 0, 1}, // 2
  {0, 0, 0, 0, 1, 1}, // 3
  {1, 0, 0, 1, 0, 0}, // 4
  {0, 1, 0, 0, 1, 0}, // 5
  {0, 1, 0, 0, 0, 0}, // 6
  {0, 0, 0, 1, 1, 1}, // 7
  {0, 0, 0, 0, 0, 0}, // 8
  {0, 0, 0, 0, 1, 0}  // 9
};

// -------------------- VARIÁVEIS GLOBAIS --------------------
bool pedidoPedestre = false;

// -------------------- FUNÇÕES AUXILIARES --------------------
void clearDisplay() {
  for (int i = 0; i < 6; i++)
    digitalWrite(SEG[i], HIGH); // anodo comum: HIGH apaga
}

void showDigit(int n) {
  if (n < 0 || n > 9) return;
  for (int i = 0; i < 6; i++)
    digitalWrite(SEG[i], DIG[n][i] ? LOW : HIGH);
}

void displayContagem(int segundos) {
  for (int s = segundos; s > 0; s--) {
    showDigit(s % 10);
    delay(1000);
  }
  clearDisplay();
}

void ativaSemaforoCarro(bool verde, bool amarelo, bool vermelho) {
  digitalWrite(VERDE_CARRO, verde ? HIGH : LOW);
  digitalWrite(AMARELO_CARRO, amarelo ? HIGH : LOW);
  digitalWrite(VERMELHO_CARRO, vermelho ? HIGH : LOW);
}

void ativaSemaforoPedestre(bool verde, bool vermelho) {
  digitalWrite(PED_VERDE, verde ? HIGH : LOW);
  digitalWrite(PED_VERMELHO, vermelho ? HIGH : LOW);
}

void verificaPedidoPedestre(int tempoVerde) {
  pedidoPedestre = false;
  for (int i = tempoVerde; i > 0; i--) {
    if (digitalRead(BOTAO_PED) == LOW) pedidoPedestre = true;
    showDigit(i % 10);
    delay(1000);
  }
  clearDisplay();
}

void esperaOutroSemaforo(int tempoOutroVerde) {
  ativaSemaforoCarro(false, false, true);  // carro parado
  ativaSemaforoPedestre(true, false);      // pedestre atravessa
  displayContagem(tempoOutroVerde);        // conta tempo
  ativaSemaforoPedestre(false, true);      // pedestre para
}

// -------------------- SETUP --------------------
void setup() {
  pinMode(VERDE_CARRO, OUTPUT);
  pinMode(AMARELO_CARRO, OUTPUT);
  pinMode(VERMELHO_CARRO, OUTPUT);
  pinMode(PED_VERDE, OUTPUT);
  pinMode(PED_VERMELHO, OUTPUT);
  pinMode(BOTAO_PED, INPUT_PULLUP);

  for (int i = 0; i < 6; i++) {
    pinMode(SEG[i], OUTPUT);
    digitalWrite(SEG[i], HIGH); // apaga display
  }

  ativaSemaforoPedestre(false, true); // pedestre começa parado

  if (SEMAFORO_ID == 2) {
    esperaOutroSemaforo(VERDE_1);
  }
}

// -------------------- LOOP PRINCIPAL --------------------
void loop() {
  int tempoVerde   = (SEMAFORO_ID == 1 ? VERDE_1 : VERDE_2);
  int tempoOutro   = (SEMAFORO_ID == 1 ? VERDE_2 : VERDE_1);

  // —— FASE VERDE —— carros andando
  ativaSemaforoCarro(true, false, false);
  ativaSemaforoPedestre(false, true); // pedestre parado
  verificaPedidoPedestre(tempoVerde);

  // —— FASE PEDRESTRE —— se houver pedido durante o verde dos carros
  if (pedidoPedestre) {
    ativaSemaforoCarro(false, false, true);  // carro para
    ativaSemaforoPedestre(true, false);      // pedestre anda
    displayContagem(PED_ESTADA);
    ativaSemaforoPedestre(false, true);      // pedestre para
  }

  // —— FASE AMARELA —— transição
  ativaSemaforoCarro(false, true, false);
  delay(AMARELO);

  // —— FASE VERMELHA —— carros parados, pedestre pode atravessar
  esperaOutroSemaforo(tempoOutro);

  // —— RESET luzes —— antes de voltar para verde
  ativaSemaforoCarro(false, false, false);
}
